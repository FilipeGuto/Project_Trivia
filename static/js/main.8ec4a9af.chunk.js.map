{"version":3,"sources":["trivia.png","Components/Input/index.js","Components/Button/index.js","services/fetchAPI.js","services/fetchTriviaAPI.js","helpers/generateRandomAnswer.js","helpers/localStorage.js","services/fetchUrlGravatarAPI.js","Redux/Action/index.js","Pages/Login.js","Pages/Settings.js","Components/Header/index.js","Components/Multiple/index.js","Components/Timer/index.js","Pages/Trivia.js","Pages/Ranking.js","Pages/Feedback.js","App.js","serviceWorker.js","Redux/Reducers/userReducer.js","Redux/Reducers/triviaReducer.js","Redux/Reducers/timerReducer.js","Redux/Reducers/index.js","Redux/Store/index.js","index.js"],"names":["module","exports","Input","this","props","text","name","type","onChange","value","dataTest","htmlFor","data-testid","id","Component","Button","onClick","disabled","className","fetchAPI","a","fetch","response","json","data","console","log","message","fetchTriviaAPI","token","triviaURL","results","generateRandomAnswer","correctAnswer","wrongAnswer","answersArray","index","length","secondIndex","Math","floor","random","tempNumber","saveToLocalStorage","string","localStorage","setItem","JSON","stringify","getPlayerDataFromLocalStorage","property","parse","getItem","player","fetchUrlGravatarAPI","email","gravatarEmail","md5","toString","gravatarURL","url","ALL_ACTIONS","addUrlGravatar","urlGravatar","payload","loading","setIsClicked","getSeconds","seconds","changeVisibility","updateScore","score","toggleStatusCronometer","status","Login","state","emailValid","nameValid","handleName","bind","handleEmail","handleClick","handleSettings","getToken","target","test","setState","history","getName","fetchURL","resetScoreAction","getData","assertions","push","src","logo","alt","connect","dispatch","saveToken","addName","fetchUrlGravatar","Settings","Header","imgURL","user","result","trivia","assertion","Multiple","redirect","renderQuestionAndAnswers","changeQuestion","requestAPI","toggleDisabled","toggleVisibility","updateAssertions","stopCronometer","difficultyLevel","difficulty","updatedPlayer","Number","updateAssertionsAndScore","prevState","ranking","picture","oldRanking","newRanking","setRankingLocalStorage","isClicked","category","question","answers","correct","find","map","answer","mapIndex","key","isVisible","to","timer","hard","medium","easy","newQuestion","correct_answer","incorrect_answers","fetchAPIThunk","updateScoreAction","getSecondsAction","Timer","setTime","_","statusCronometer","clearInterval","interval","setInterval","setStatusCronometer","Trivia","Ranking","sort","b","Feedback","redirectOnClick","innerText","asserts","App","path","exact","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","triviaReducer","timerReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ec4a9af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { text, name, type, onChange, value, dataTest } = this.props;\n    return (\n      <label htmlFor={ name }>\n        { text }\n        <input\n          data-testid={ dataTest }\n          id={ name }\n          name={ name }\n          type={ type }\n          onChange={ onChange }\n          value={ value }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  text: PropTypes.string,\n  name: PropTypes.string,\n  type: PropTypes.string,\n  dataTest: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}.isRequired;\n\nexport default Input;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    const { onClick, id, dataTest, text, disabled } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ onClick }\n        disabled={ disabled }\n        id={ id }\n        className={ id }\n        data-testid={ dataTest }\n      >\n        {text}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  dataTest: PropTypes.string,\n  text: PropTypes.string,\n  disabled: PropTypes.bool,\n}.isRequired;\n\nexport default Button;\n","const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst fetchAPI = async () => {\n  try {\n    const response = await fetch(TOKEN_URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport default fetchAPI;\n","const fetchTriviaAPI = async (token) => {\n  const triviaURL = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const response = await fetch(triviaURL);\n  const data = await response.json();\n  return data.results;\n};\n\nexport default fetchTriviaAPI;\n","const generateRandomAnswer = (correctAnswer, wrongAnswer) => {\n  const answersArray = [correctAnswer, ...wrongAnswer];\n  for (let index = answersArray.length - 1; index > 0; index -= 1) {\n    const secondIndex = Math.floor(Math.random() * (index + 1));\n    const tempNumber = answersArray[index];\n    answersArray[index] = answersArray[secondIndex];\n    answersArray[secondIndex] = tempNumber;\n  }\n  // const correct = randomAnswerArray.find((text) => text === correctAnswer);\n  return answersArray;\n};\n\nexport default generateRandomAnswer;\n","export const setPlayerInLocalStorage = () => {\n  const INITIAL_STATE = {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n  };\n  localStorage.setItem('state', JSON.stringify({ player: INITIAL_STATE }));\n};\n\nexport const setRankingLocalStorage = (name, score, urlGravatar) => {\n  const ranking = [\n    { name, score, picture: urlGravatar },\n  ];\n\n  if (localStorage.getItem('ranking')) {\n    const oldRanking = JSON.parse(localStorage.getItem('ranking'));\n    const newRanking = [...oldRanking, { name, score, picture: urlGravatar }];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n    return newRanking;\n  }\n  localStorage.setItem('ranking', JSON.stringify(ranking));\n};\n\nexport const saveToLocalStorage = (data, string) => {\n  localStorage.setItem(string, JSON.stringify(data));\n};\n\nexport const updateAssertionsAndScore = (difficulty, seconds) => {\n  const TEN = 10;\n  const state = JSON.parse(localStorage.getItem('state'));\n  const updatedPlayer = {\n    ...state.player,\n    score: Number(state.player.score) + (Number(TEN + (difficulty * seconds))),\n    assertions: Number(state.player.assertions) + 1,\n  };\n  localStorage.setItem('state', JSON.stringify({ player: updatedPlayer }));\n};\n\nexport const getPlayerDataFromLocalStorage = (property) => {\n  const state = JSON.parse(localStorage.getItem('state'));\n  return state.player[property];\n};\n\nexport const getRankingDataFromLocalStorage = () => {\n  const ranking = JSON.parse(localStorage.getItem('ranking'));\n  return ranking.sort((a, b) => b.score - a.score);\n};\n","import md5 from 'crypto-js/md5';\n\nconst fetchUrlGravatarAPI = async (email) => {\n  const gravatarEmail = md5(email).toString();\n  const gravatarURL = `https://www.gravatar.com/avatar/${gravatarEmail}`;\n  const response = await fetch(gravatarURL);\n  return response.url;\n};\n\nexport default fetchUrlGravatarAPI;\n","import fetchTriviaAPI from '../../services/fetchTriviaAPI';\nimport generateRandomAnswer from '../../helpers/generateRandomAnswer';\nimport { getPlayerDataFromLocalStorage } from '../../helpers/localStorage';\nimport fetchUrlGravatarAPI from '../../services/fetchUrlGravatarAPI';\n\nconst ADD_NAME = 'ADD_NAME';\nconst ADD_EMAIL = 'ADD_EMAIL';\nconst SAVE_TOKEN = 'SAVE_TOKEN';\nconst ADD_URLGRAVATAR = 'ADD_URLGRAVATAR';\nconst REQUEST_GRAVATAR_SUCCESS = 'REQUEST_GRAVATAR_SUCCESS';\nconst RESQUEST_QUESTION_SUCESS = 'RESQUEST_QUESTION_SUCESS';\nconst LOADING = 'LOADING';\nconst SET_IS_CLICKED = 'SET_IS_CLICKED';\nconst GET_SECONDS = 'GET_SECONDS';\nconst CHANGE_VISIBILITY = 'CHANGE_VISIBILITY';\nconst UPDATE_SCORE = 'UPDATE_SCORE';\nconst TOGGLE_CRONOMETER = 'TOGGLE_CRONOMETER';\nconst COUNT_ASSERTIONS = 'COUNT_ASSERTIONS';\nconst RESET_SCORE = 'RESET_SCORE';\n\nexport const ALL_ACTIONS = {\n  ADD_NAME,\n  ADD_EMAIL,\n  SAVE_TOKEN,\n  ADD_URLGRAVATAR,\n  REQUEST_GRAVATAR_SUCCESS,\n  RESQUEST_QUESTION_SUCESS,\n  LOADING,\n  SET_IS_CLICKED,\n  GET_SECONDS,\n  CHANGE_VISIBILITY,\n  UPDATE_SCORE,\n  TOGGLE_CRONOMETER,\n  COUNT_ASSERTIONS,\n  RESET_SCORE,\n};\n\nexport const addName = (name) => ({\n  type: ALL_ACTIONS.ADD_NAME,\n  payload: name,\n});\n\nexport const addEmail = (email) => ({\n  type: ALL_ACTIONS.ADD_EMAIL,\n  payload: email,\n});\n\nexport const saveToken = (token) => ({\n  type: ALL_ACTIONS.SAVE_TOKEN,\n  payload: token,\n});\n\nexport const addUrlGravatar = (urlGravatar) => ({\n  type: ALL_ACTIONS.ADD_URLGRAVATAR,\n  payload: urlGravatar,\n});\n\nexport const loading = () => ({\n  type: ALL_ACTIONS.LOADING,\n  payload: false,\n});\n\nexport const resetScore = () => ({\n  type: ALL_ACTIONS.RESET_SCORE,\n});\n\nexport const fetchAPIThunk = (token) => async (dispatch) => {\n  dispatch(loading());\n  const result = await fetchTriviaAPI(token);\n  const difficultyLevel = { hard: 3, medium: 2, easy: 1 };\n  const newQuestion = result.map((answer) => ({\n    category: answer.category,\n    type: answer.type,\n    difficultyLevel: difficultyLevel[answer.difficulty],\n    question: answer.question,\n    correctAnswer: answer.correct_answer,\n    answers: generateRandomAnswer(answer.correct_answer, answer.incorrect_answers),\n  }));\n  dispatch({\n    type: ALL_ACTIONS.RESQUEST_QUESTION_SUCESS,\n    payload: newQuestion,\n  });\n};\n\nexport const fetchUrlGravatar = (email) => async (dispatch) => {\n  dispatch(loading());\n  const url = await fetchUrlGravatarAPI(email);\n  dispatch(addUrlGravatar(url));\n};\n\nexport const setIsClicked = () => ({\n  type: ALL_ACTIONS.SET_IS_CLICKED,\n});\n\nexport const getSeconds = (seconds) => ({\n  type: ALL_ACTIONS.GET_SECONDS,\n  payload: seconds,\n});\n\nexport const changeVisibility = () => ({\n  type: ALL_ACTIONS.CHANGE_VISIBILITY,\n});\n\nexport const updateScore = (score) => ({\n  type: ALL_ACTIONS.UPDATE_SCORE,\n  payload: score,\n});\n\nexport const receiveScore = () => async (dispatch) => {\n  const score = getPlayerDataFromLocalStorage('score');\n  dispatch(updateScore(score));\n};\n\nexport const toggleStatusCronometer = (status) => ({\n  type: ALL_ACTIONS.TOGGLE_CRONOMETER,\n  payload: status,\n});\n\nexport const updateAssertions = (number) => ({\n  type: ALL_ACTIONS.COUNT_ASSERTIONS,\n  payload: number,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Input from '../Components/Input';\nimport Button from '../Components/Button';\nimport fetchAPI from '../services/fetchAPI';\nimport logo from '../trivia.png';\nimport { addName, saveToken, fetchUrlGravatar, resetScore } from '../Redux/Action';\nimport {\n  saveToLocalStorage,\n  setPlayerInLocalStorage,\n} from '../helpers/localStorage';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      name: '',\n      emailValid: false,\n      nameValid: false,\n    };\n\n    this.handleName = this.handleName.bind(this);\n    this.handleEmail = this.handleEmail.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSettings = this.handleSettings.bind(this);\n  }\n\n  async getData() {\n    const { getToken } = this.props;\n    const data = await fetchAPI();\n    saveToLocalStorage(data.token, 'token');\n    getToken(data.token);\n  }\n\n  handleEmail({ target }) {\n    const email = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/g;\n    const emailValid = email.test(target.value);\n\n    this.setState({\n      email: target.value,\n      emailValid,\n    });\n  }\n\n  handleName({ target }) {\n    const NUMBER_THREE = 3;\n    if (target.value.length >= NUMBER_THREE) {\n      this.setState({\n        nameValid: true,\n      });\n    }\n    this.setState({\n      name: target.value,\n    });\n  }\n\n  handleClick() {\n    const { history, getName, fetchURL, resetScoreAction } = this.props;\n    const { name, email } = this.state;\n    this.getData();\n    getName(name);\n\n    resetScoreAction();\n    setPlayerInLocalStorage();\n    fetchURL(email);\n\n    history.push('/trivia');\n  }\n\n  handleSettings() {\n    const { history } = this.props;\n\n    history.push('/settings');\n  }\n\n  render() {\n    const { email, name, emailValid, nameValid } = this.state;\n    return (\n      <div className=\"App-body\">\n        <header className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"login-form-container\">\n          <div className=\"login-form\">\n            <Input\n              name=\"name\"\n              dataTest=\"input-player-name\"\n              text=\"Nome: \"\n              onChange={ this.handleName }\n              value={ name }\n            />\n            <Input\n              name=\"email\"\n              dataTest=\"input-gravatar-email\"\n              text=\"Email: \"\n              onChange={ this.handleEmail }\n              value={ email }\n            />\n            <Button\n              text=\"Jogar\"\n              dataTest=\"btn-play\"\n              id=\"btn-play\"\n              disabled={ !(emailValid && nameValid) }\n              onClick={ this.handleClick }\n            />\n            <Button\n              text=\"Configurações\"\n              dataTest=\"btn-settings\"\n              id=\"btn-settings\"\n              onClick={ this.handleSettings }\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.func),\n  getToken: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: (token) => dispatch(saveToken(token)),\n  getName: (name) => dispatch(addName(name)),\n  fetchURL: (email) => dispatch(fetchUrlGravatar(email)),\n  resetScoreAction: () => dispatch(resetScore()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\n\nexport default class Settings extends Component {\n  render() {\n    return <h2 data-testid=\"settings-title\">Sou um titulo</h2>;\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../../Styles/trivia.css';\nimport { addUrlGravatar } from '../../Redux/Action';\n\nclass Header extends Component {\n  render() {\n    const { name, score, imgURL } = this.props;\n    return (\n      <header className=\"trivia-header\">\n        <div className=\"player-info-container\">\n          <img data-testid=\"header-profile-picture\" src={ imgURL } alt=\"gravatar\" />\n          <p data-testid=\"header-player-name\">{ name }</p>\n        </div>\n        <p data-testid=\"header-score\" className=\"header-score\">{ `Pontos: ${score}` }</p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  result: state.trivia.result,\n  score: state.trivia.score,\n  imgURL: state.user.urlGravatar,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  urlGravatar: (urlGravatar) => dispatch(addUrlGravatar(urlGravatar)),\n});\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  urlGravatar: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport Button from '../Button';\nimport {\n  changeVisibility,\n  fetchAPIThunk,\n  getSeconds as getSecondsAction,\n  setIsClicked,\n  toggleStatusCronometer,\n  updateAssertions as updateAssertionsAction,\n  updateScore as updateScoreAction,\n} from '../../Redux/Action';\nimport '../../Styles/trivia.css';\nimport {\n  setRankingLocalStorage,\n  updateAssertionsAndScore } from '../../helpers/localStorage';\n\nlet assertion = 0;\nconst MAX_INDEX = 4;\nclass Multiple extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      index: 0,\n      redirect: false,\n    };\n\n    this.renderQuestionAndAnswers = this.renderQuestionAndAnswers.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeQuestion = this.changeQuestion.bind(this);\n    this.requestAPI = this.requestAPI.bind(this);\n  }\n\n  componentDidMount() {\n    this.requestAPI();\n  }\n\n  requestAPI() {\n    const { fetchAPI, token } = this.props;\n    fetchAPI(token);\n  }\n\n  handleClick({ target: { id } }) {\n    const {\n      toggleDisabled,\n      toggleVisibility,\n      result,\n      updateAssertions,\n      stopCronometer,\n    } = this.props;\n    const { index } = this.state;\n    toggleDisabled();\n    toggleVisibility();\n    if (id === 'correct-answer') {\n      const TEN = 10;\n      const { updateScore, seconds } = this.props;\n      const { difficultyLevel } = result[index];\n      updateAssertionsAndScore(difficultyLevel, seconds);\n      const score = 0;\n      const totalScore = score + (TEN + (difficultyLevel * seconds));\n      assertion += 1;\n      updateScore(totalScore);\n      updateAssertions(assertion);\n    }\n    stopCronometer('off');\n  }\n\n  changeQuestion() {\n    const {\n      toggleDisabled,\n      toggleVisibility,\n      stopCronometer,\n      getSeconds,\n      name,\n      score,\n      urlGravatar,\n    } = this.props;\n    const { index } = this.state;\n    const THIRTY = 30;\n    if (index < MAX_INDEX) {\n      this.setState((prevState) => ({\n        index: prevState.index + 1,\n      }));\n    } else {\n      setRankingLocalStorage(name, score, urlGravatar);\n      this.setState({ redirect: true });\n    }\n    toggleVisibility();\n    toggleDisabled();\n    stopCronometer('on');\n    getSeconds(THIRTY);\n  }\n\n  renderQuestionAndAnswers() {\n    const { isClicked, result } = this.props;\n    const { index } = this.state;\n\n    if (result.length) {\n      const { category, question, answers, correctAnswer } = result[index];\n      const correct = answers.find((text) => text === correctAnswer);\n      return (\n        <>\n          <div className=\"trivia-game-question\">\n            <p data-testid=\"question-category\">{category}</p>\n            <p data-testid=\"question-text\">{question}</p>\n          </div>\n          <div className=\"trivia-game-buttons\">\n            { answers.map((answer, mapIndex) => (\n              correct === answer\n                ? (\n                  <Button\n                    key={ mapIndex }\n                    text={ correct }\n                    id=\"correct-answer\"\n                    dataTest=\"correct-answer\"\n                    onClick={ this.handleClick }\n                    disabled={ isClicked }\n                  />\n                )\n                : (\n                  <Button\n                    key={ mapIndex }\n                    text={ answer }\n                    id=\"wrong-answer\"\n                    dataTest={ `wrong-answer-${index}` }\n                    onClick={ this.handleClick }\n                    disabled={ isClicked }\n                  />\n                )\n            )) }\n          </div>\n        </>\n      );\n    }\n  }\n\n  render() {\n    const { loading, isVisible } = this.props;\n    const { redirect } = this.state;\n    if (loading) {\n      return (\n        <p>Carregando...</p>\n      );\n    }\n    if (redirect) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"trivia-game\">\n        <div className=\"trivia-game-container\">\n          { this.renderQuestionAndAnswers() }\n          { isVisible\n        && <Button\n          text=\"Próxima\"\n          dataTest=\"btn-next\"\n          onClick={ this.changeQuestion }\n        />}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nMultiple.propTypes = {\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = ({ user, trivia, timer }) => ({\n  token: user.token,\n  isClicked: trivia.isClicked,\n  result: trivia.result,\n  isVisible: trivia.isVisible,\n  loading: trivia.loading,\n  seconds: timer.seconds,\n  name: user.name,\n  score: trivia.score,\n  urlGravatar: user.urlGravatar,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleDisabled: () => dispatch(setIsClicked()),\n  fetchAPI: (token) => dispatch(fetchAPIThunk(token)),\n  toggleVisibility: () => dispatch(changeVisibility()),\n  updateScore: (score) => dispatch(updateScoreAction(score)),\n  updateAssertions: (assertions) => dispatch(updateAssertionsAction(assertions)),\n  stopCronometer: (status) => dispatch(toggleStatusCronometer(status)),\n  getSeconds: (seconds) => dispatch(getSecondsAction(seconds)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Multiple);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  changeVisibility,\n  getSeconds as getSecondsAction,\n  setIsClicked,\n  toggleStatusCronometer,\n} from '../../Redux/Action';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      seconds: props.seconds,\n    };\n\n    this.setTime = this.setTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.setTime();\n  }\n\n  shouldComponentUpdate(_, prevState) {\n    const {\n      toggleDisabled,\n      toggleVisibility,\n      statusCronometer,\n    } = this.props;\n    const MIN_SECONDS = 0;\n    if (prevState.seconds < MIN_SECONDS) {\n      clearInterval(this.interval);\n      toggleDisabled();\n      toggleVisibility();\n      return false;\n    } if (statusCronometer === 'off') {\n      clearInterval(this.interval);\n    }\n    return true;\n  }\n\n  setTime() {\n    const ONE_SEC = 1000;\n    this.interval = setInterval(() => {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds - 1,\n      }));\n    }, ONE_SEC);\n  }\n\n  render() {\n    const { seconds } = this.state;\n    const { getSeconds } = this.props;\n    getSeconds(seconds);\n\n    return (\n      <div>\n        { seconds }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ timer }) => ({\n  statusCronometer: timer.statusCronometer,\n  seconds: timer.seconds,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleVisibility: () => dispatch(changeVisibility()),\n  toggleDisabled: () => dispatch(setIsClicked()),\n  getSeconds: (seconds) => dispatch(getSecondsAction(seconds)),\n  setStatusCronometer: (status) => dispatch(toggleStatusCronometer(status)),\n});\n\nTimer.propTypes = {\n  toggleDisabled: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Header from '../Components/Header';\nimport Multiple from '../Components/Multiple';\nimport Timer from '../Components/Timer';\nimport '../Styles/trivia.css';\nimport { setIsClicked } from '../Redux/Action';\n\nclass Trivia extends Component {\n  render() {\n    const { statusCronometer } = this.props;\n    return (\n      <div className=\"trivia-page\">\n        <Header />\n        <Multiple />\n        { statusCronometer === 'on' ? <Timer /> : null }\n      </div>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = ({ user, trivia, timer }) => ({\n  token: user.token,\n  isClicked: trivia.isClicked,\n  statusCronometer: timer.statusCronometer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleDisabled: () => dispatch(setIsClicked()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Components/Button';\nimport { getRankingDataFromLocalStorage } from '../helpers/localStorage';\nimport '../Styles/trivia.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { history } = this.props;\n\n    history.push('/');\n  }\n\n  render() {\n    const ranking = getRankingDataFromLocalStorage();\n    return (\n      <div className=\"ranking-page\">\n        <h1 data-testid=\"ranking-title\">\n          Seu Ranking!\n        </h1>\n        <div className=\"players-ranking\">\n          { ranking.map((player, index) => (\n            <div\n              className=\"player-ranking\"\n              key={ player.name }\n            >\n              <p data-testid={ `player-name-${index}` }>{player.name}</p>\n              <img src={ player.picture } alt=\"gravatar\" />\n              <p data-testid={ `player-score-${index}` }>{`${player.score} pontos`}</p>\n            </div>\n          )) }\n        </div>\n        <footer>\n          <Button\n            text=\"Home\"\n            id=\"btn-go-home\"\n            dataTest=\"btn-go-home\"\n            onClick={ this.handleClick }\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.func,\n}.isRequired;\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header/index';\nimport Button from '../Components/Button';\nimport { getPlayerDataFromLocalStorage } from '../helpers/localStorage';\nimport '../Styles/trivia.css';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.redirectOnClick = this.redirectOnClick.bind(this);\n  }\n\n  redirectOnClick({ target }) {\n    if (target.innerText === 'Ver Ranking') {\n      const { history } = this.props;\n      history.push('/ranking');\n    } else {\n      const { history } = this.props;\n      history.push('/');\n    }\n  }\n\n  render() {\n    // const { assertions, score } = this.props;\n    const THREE = 3;\n    const asserts = getPlayerDataFromLocalStorage('assertions');\n    const score = getPlayerDataFromLocalStorage('score');\n    return (\n      <div>\n        <Header />\n        <div className=\"feedback-page\">\n          <div className=\"feedback-container\">\n            { asserts >= THREE\n              ? <p className=\"fdtxt\" data-testid=\"feedback-text\">Mandou bem!</p>\n              : <p className=\"fdtxt\" data-testid=\"feedback-text\">Podia ser melhor...</p>}\n            <p>\n              {'Pontuação final: '}\n              <span data-testid=\"feedback-total-score\">{ score }</span>\n            </p>\n            <p>\n              {'Respostas corretas: '}\n              <span data-testid=\"feedback-total-question\">{ asserts }</span>\n            </p>\n            <Button\n              text=\"Jogar novamente\"\n              id=\"btn-play-again\"\n              dataTest=\"btn-play-again\"\n              onClick={ this.redirectOnClick }\n            />\n            <Button\n              text=\"Ver Ranking\"\n              id=\"btn-ranking\"\n              dataTest=\"btn-ranking\"\n              onClick={ this.redirectOnClick }\n            />\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ trivia }) => ({\n  assertions: trivia.assertions,\n  score: trivia.score,\n});\n\nFeedback.propTypes = {\n  history: PropTypes.objectOf(PropTypes.func),\n}.isRequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Pages/Login';\nimport Settings from './Pages/Settings';\nimport Trivia from './Pages/Trivia';\nimport Ranking from './Pages/Ranking';\nimport Feedback from './Pages/Feedback';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={ Login } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/trivia\" component={ Trivia } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ALL_ACTIONS } from '../Action';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: '',\n  urlGravatar: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case ALL_ACTIONS.SAVE_TOKEN:\n    return {\n      ...state,\n      token: payload,\n    };\n  case ALL_ACTIONS.ADD_NAME:\n    return {\n      ...state,\n      name: payload,\n    };\n  case ALL_ACTIONS.ADD_URLGRAVATAR:\n    return {\n      ...state,\n      urlGravatar: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { ALL_ACTIONS } from '../Action';\n\nconst INITIAL_STATE = {\n  isClicked: false,\n  result: [],\n  loading: true,\n  isVisible: false,\n  score: 0,\n  assertions: 0,\n};\n\nconst triviaReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case ALL_ACTIONS.RESQUEST_QUESTION_SUCESS:\n    return {\n      ...state,\n      result: payload,\n    };\n  case ALL_ACTIONS.SET_IS_CLICKED:\n    return {\n      ...state,\n      isClicked: !state.isClicked,\n    };\n  case ALL_ACTIONS.LOADING:\n    return {\n      ...state,\n      loading: payload,\n    };\n  case ALL_ACTIONS.CHANGE_VISIBILITY:\n    return {\n      ...state,\n      isVisible: !state.isVisible,\n    };\n  case ALL_ACTIONS.UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + payload,\n    };\n  case ALL_ACTIONS.RESET_SCORE:\n    return {\n      ...state,\n      score: 0,\n    };\n  case ALL_ACTIONS.COUNT_ASSERTIONS:\n    return {\n      ...state,\n      assertions: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default triviaReducer;\n","import { ALL_ACTIONS } from '../Action';\n\nconst INITIAL_STATE = {\n  seconds: 30,\n  statusCronometer: 'on',\n};\n\nconst timerReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case ALL_ACTIONS.TOGGLE_CRONOMETER:\n    return {\n      ...state,\n      statusCronometer: payload,\n    };\n  case ALL_ACTIONS.GET_SECONDS:\n    return {\n      ...state,\n      seconds: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default timerReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport triviaReducer from './triviaReducer';\nimport timerReducer from './timerReducer';\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  trivia: triviaReducer,\n  timer: timerReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Redux/Store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}